// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model Plan {
id String @id @default(cuid())
name String?
limit Limits @relation(fields: [limit_id], references: [id])
limit_id String
price_m String
price_y String
price_m_id String
price_y_id String
User User[]



@@map(name: "plan")
}

model Limits {
  id        String @id @default(cuid())
  botsNum   Int?
  docsSize  Int?
  docsTypes String
  Plan      Plan[]

  @@map(name: "limits")
}

model User {
  id             String       @id @default(cuid())
  name           String? 
  firstName      String?
  lastName       String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole     @default(USER)
  accounts       Account[]
  billing        BillingInfo?
  openai_api_key String?
  plan           Plan?        @relation(fields: [plan_id], references: [id])
  plan_id        String?

  @@map(name: "user")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model BillingInfo {
  id          String  @id @default(cuid())
  userId      String  @unique
  company     String?
  address     String?
  state       String?
  city        String?
  country     String?
  pinCode     String?
  phoneNumber String?
  phoneCode   String?

  user User @relation(fields: [userId], references: [id])
}
